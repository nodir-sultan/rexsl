# OAuth Authentication for JAX-RS Resources

Authentication in a RESTful API/interface/website can be implemented
only by means of
{{{http://en.wikipedia.org/wiki/HTTP_cookie}HTTP cookies}}. An authenticated
user makes HTTP requests to the server with authentication cookies inside.
The cookie shall contain the name of the user in an encrypted format, to
prevent a stranger from faking user identity, since encryption method,
secret key, and "cryptographic salt" are not disclosed.

Only the server can generate an authentication cookie, when user identity is verified
and provided by an authentication provider. The most popular authentication
protocol is {{{http://oauth.net/}OAuth}},
used by major providers like
{{{http://developers.facebook.com/docs/reference/dialogs/oauth/}Facebook}} and
{{{https://developers.google.com/accounts/docs/OAuth2}Google}}.

{{{./apidocs-${project.version}/com/rexsl/page/auth/AuthInset.html}<<<AuthInset>>>}}
helps to manage OAuth authentication. First, make sure your base
JAX-RS resource has a
{{{./apidocs-${project.version}/com/rexsl/page/Inset.html}<<<@Inset.Runtime>>>}}-annotated
method that returns an instance of
{{{./apidocs-${project.version}/com/rexsl/page/auth/AuthInset.html}<<<AuthInset>>>}}:

<<<>>><<<java
public abstract class BaseRs extends BaseResource {
  @Inset.Runtime
  public final AuthInset auth() {
    return new AuthInset(this, "secret-key")
        .with(new Facebook(this, "3f54a...", "a4fe5s..."))
        .with(new Github(this, "8fe...", "34b2a..."))
        .with(new Google(this, "7395..", "7auajs..."));
  }
}
>>><<<>>>

Once it's done, every page of your site will be rendered with the
following <<<<link>>>> elements inside <<<<links>>>> group:

<<<>>><<<
<page>
  <links>
    <link rel="rexsl:facebook" href="https://www.facebook.com/dial..." />
    <link rel="rexsl:github" href="https://github.com/login/oauth/au..." />
    <link rel="rexsl:google" href="https://accounts.google.com/o/oaut..." />
    ... other links ...
  </links>
</page>
>>><<<>>>

When one of the links above is clicked, the user will be forwarded to the
authentication page of the provider (Facebook, Google, etc.). When
authenticated, the user comes back to your website with a secret
code generated by the provider. The inset sends an HTTP request to the provider
to fetch necessary identity information, like unique ID, full name, and
a personal photo.

Then, the inset redirects the user to the original page,
and adds an authentication cookie. Besides that, the page gets this data:

<<<>>><<<xml
<page>
  <identity>
    <urn>urn:facebook:54321</urn>
    <name>John Doe</name>
    <photo>http://images.facebook.com/...</photo>
    <token>7PGELH0M-FHS09VC0-...-1L33MJA7</token>
  </identity>
</page>
>>><<<>>>

Authentication token in <<<"token">>> element is the exact value
of <<<Rexsl-Auth>>> cookie, which identifies the authenticated user.

Also, you can get an access to the authenticated identity
programmatically:

<<<>>><<<java
public final class IndexRs extends BaseRs {
  public String name() {
    if (this.auth().identity().equals(Identity.ANONYMOUS)) {
      return "unknown";
    } else {
      return this.auth().identity().name();
    }
  }
}
>>><<<>>>

URN of identity is created by authentication providers and consists
of namespace ID (<<<"facebook">>> for {{{http:://www.facebook.com}Facebook}},
<<<"google">>> for {{{http://www.google.com}Google}},
<<<"github">>> for {{{http://www.github.com), etc.}Github}}
and namespace specific string with a unique ID of the user, as defined
by the provider. You can use this URN as a unique identifier of the user
in your system. It is always unique.

When a user is not authenticated <<<AuthInset#identity()>>> method returns
<<<Identity.ANONYMOUS>>>.

See also {{{./inset-http-basic.html}HTTP Basic Authentication}}.
