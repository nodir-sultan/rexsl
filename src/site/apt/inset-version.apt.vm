  ---
  Versioned WAR Package
  ---
  Yegor Bugayenko
  ---
  2014-11-02
  ---

Versioned WAR Package

  It is convenient for end-users and the development team to see
  which version of the software is currently deployed to the web
  server and serves HTTP requests. For example, take a look a the right bottom
  page of {{{http://www.s3auth.com}www.s3auth.com}}. There is a version
  number and a Git revision hash. For most end-users this information doesn't
  add any value, but for developers and advanced users may help to
  test the system and explore its features. You can use
  {{{./apidocs-${project.version}/com/rexsl/page/inset/VersionInset.html}<<<VersionInset>>>}}
  to automate the versioning mechanism:

+--
public abstract class BaseRs extends BaseResource {
  public Inset version() {
    return new VersionInset("1.0", "r.3245", "14-Mar-2013");
  }
}
+--

  The page will be rendered like this:

+--
<page>
  <version>
    <name>1.0</name>
    <revision>r.3245</revision>
    <date>14-Mar-2013</date>
  </version>
</page>
+--

  It is recommended to use <<<VersionInset>>> together with
  <<<MANIFEST.MF>>> file and
  {{{http://www.jcabi.com/jcabi-manifests/apidocs-0.7.14/com/jcabi/manifests/Manifests.html}<<<Manifests>>>}} class from
  {{{http://www.jcabi.com/jcabi-manifests/}jcabi-manifests}}:

+--
public abstract class BaseRs extends BaseResource {
  public Inset version() {
    return new VersionInset(
        Manifests.read("Example-Version"),
        Manifests.read("Example-Revision"),
        Manifests.read("Example-Date")
    );
  }
}
+--

  Then, during packaging of your <<<WAR>>> archive, Maven adds
  Example-Version, Example-Revision, and Example-Date attributes to the
  <<<MANIFEST.MF>>> file - read more about package versioning
  {{{http://www.jcabi.com/jcabi-manifests/versioning.html}here}}.
